// Goal: Use goroutine to simulate an event model
// Scenario: Create a button (struct) which allows 'Click' event
// Objects can subscribe to listen to these events by submitting a channel
// Channel gets a message when an event occurs

package main

type Button struct {
	eventListeners map[string][]chan string
}

// Initialize the Button's eventListener befor using
func MakeButton() *Button {
	result := new(Button)
	result.eventListeners = make(map[string][]chan string)

	return result
}

// Attach the methods to the Button struct
func (this *Button) AddEventListener(event string, responseChannel chan string) {

	if _, present := this.eventListeners[event]; present {
		this.eventListeners[event] = append(this.eventListeners[event], responseChannel)
	} else {
		this.eventListeners[event] = []chan string{responseChannel}
	}

}

// Remove the event listener from the button
func (this *Button) RemoveEventListener(event string, listenerChannel chan string) {
	if _, present := this.eventListeners[event]; present {
		for idx, _ := range this.eventListeners[event] {
			if this.eventListeners[event][idx] == listenerChannel {
				this.eventListeners[event] = append(this.eventListeners[event][:idx], this.eventListeners[event][idx+1:]...)
				break
			}

		}
	}
}

// Trigger the event
//func (this *Button) TriggerEvent()
