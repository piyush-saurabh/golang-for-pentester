package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"time"
)

// PostResponseNonConcurrent structure to represent the response body
type PostResponseNonConcurrent struct {
	UserID int    `json:"userId"`
	ID     int    `json:"id"`
	Title  string `json:"title"`
	Body   string `json:"body"`
}

// NonConcurrentCall method loops over 1-100 IDs to make REST API call in a non concurrent way
func NonConcurrentCall() {

	fmt.Println("--------------NON Concurrent Call--------------")

	url := "https://jsonplaceholder.typicode.com/posts/"

	var requestURL string

	// Check for the time taken for each call
	start := time.Now()

	//Loop from post ID 1 to 100
	for i := 1; i <= 10; i++ {

		requestURL = url + strconv.Itoa(i)

		// Send the GET request
		resp, err := http.Get(requestURL)
		if err != nil {
			// Some error occured
			log.Panicln(err)
		}

		defer resp.Body.Close()

		var postResponse PostResponseNonConcurrent

		if err := json.NewDecoder(resp.Body).Decode(&postResponse); err != nil {
			log.Fatalln(err)
		}

		fmt.Println(postResponse)
		fmt.Printf("---------------------------------\n")
	}

	// End of the time
	elapsed := time.Since(start)

	// Execution time: ~2 sec
	fmt.Printf("Execution time: %s\n", elapsed)

}
