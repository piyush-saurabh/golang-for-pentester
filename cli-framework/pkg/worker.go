package pkg

import (
	"fmt"

	"github.com/fatih/color"
	"github.com/valyala/fasthttp"
)

// Worker method performs the actual operation
func Worker(wordlist chan string, results chan ScannerResult, config *CLIConfig) {

	// randID := rand.Intn(10000)
	// fmt.Printf("Worker %d created\n", randID)
	for word := range wordlist {
		// Some blocking operation
		// Actual logic will be here

		// Send HTTP Request
		response := makeHTTPRequest(config, word)

		//time.Sleep(time.Millisecond)
		//fmt.Printf("[worker] %s\n", word)

		results <- response
	}

}

// Send HTTP Request
func makeHTTPRequest(config *CLIConfig, payload string) ScannerResult {

	// Get request and response handle
	req, res := fasthttp.AcquireRequest(), fasthttp.AcquireResponse()

	// Close the connection
	defer fasthttp.ReleaseRequest(req)
	defer fasthttp.ReleaseResponse(res)

	// Client for making HTTP request
	var client *fasthttp.Client

	// Check for proxy setting
	if *config.Proxy == "" {
		// No proxy set. Make direct connection to the server
		//fmt.Println("No proxy set")
		client = &fasthttp.Client{}
	} else {
		// [TO DO] Proxy set. Route the connection via proxy server
		//fmt.Println("Routing connection via: ", *config.Proxy)
		client = &fasthttp.Client{}
	}

	// Set the URL
	req.SetRequestURI(*config.URL)

	// Set the request method as GET
	req.Header.SetMethod(fasthttp.MethodGet)

	// Set the HTTP request header
	req.Header.Set("User-Agent", "roguesecurity")

	// Make the HTTP request
	err := client.Do(req, res)
	if err != nil {
		color.Set(color.FgHiRed)
		fmt.Println("Unexpected error occured while making the request with payload: ", payload)
		color.Unset()
	}

	responseBodyBytes := res.Body()

	// Set the Response
	// Send response
	response := ScannerResult{
		HTTPResponseCode:   res.StatusCode(),
		HTTPResponseLength: len(responseBodyBytes),
		HTTPRequestPayload: payload,
	}

	//fmt.Println(response)

	//println(string(responseBodyBytes))

	return response

	// Check if proxy is set

}
