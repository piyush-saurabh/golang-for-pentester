package pkg

import (
	"encoding/json"
	"fmt"
	"sync"

	"github.com/cheggaaa/pb"
	"github.com/fatih/color"
)

// ShowProgressBar method displays the progress par based on the number of words processed from the wordlist
// counter is the size of the workdlist
func ShowProgressBar(scannerResult chan ScannerResult, counter int, wg *sync.WaitGroup) {

	defer wg.Done()

	progressBar := pb.StartNew(counter)

	var response ScannerResult
	var responseArray []ScannerResult

	for i := 0; i < counter; i++ {

		// Fetch the response
		response = <-scannerResult
		responseArray = append(responseArray, response)
		progressBar.Increment()
	}

	progressBar.Finish()
	parseJSON(responseArray)
	//showResponse(responseArray)
}

func parseJSON(responseArray []ScannerResult) {

	// Declare empty interface
	var result map[string]interface{}

	for _, response := range responseArray {

		// Decode JSON to interface
		// Unmarshal takes byte array as 1st parameter
		json.Unmarshal(response.HTTPResponseBody, &result)
		fmt.Println("Response JSON = ", result)
	}

}

func showResponse(responseArray []ScannerResult) {
	color.Set(color.FgHiBlue)
	fmt.Printf("Code \t Length\t Payload\n")
	fmt.Printf("===========================\n")
	color.Unset()

	for _, response := range responseArray {
		color.Set(color.FgHiGreen)
		fmt.Printf("%d \t %d \t %s\n", response.HTTPResponseCode, response.HTTPResponseLength, response.HTTPRequestPayload)
		color.Unset()
	}
}
