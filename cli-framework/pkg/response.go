package pkg

import (
	"encoding/csv"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"sync"

	"github.com/cheggaaa/pb"
	"github.com/fatih/color"
)

// ShowProgressBar method displays the progress par based on the number of words processed from the wordlist
// counter is the size of the workdlist
func ShowProgressBar(scannerResult chan ScannerResult, config *CLIConfig, wg *sync.WaitGroup) {

	defer wg.Done()

	counter := config.WordCount

	progressBar := pb.StartNew(counter)

	var response ScannerResult
	var responseArray []ScannerResult

	for i := 0; i < counter; i++ {

		// Fetch the response
		response = <-scannerResult
		responseArray = append(responseArray, response)
		progressBar.Increment()
	}

	progressBar.Finish()

	// Display the output
	outputFileName := *config.OutputFileName
	if outputFileName == "" {
		//Print the output on screen
		showResponseOnTerminal(responseArray)
		parseJSON(responseArray)
		//fmt.Println(string(responseArray[1].HTTPResponseBody))
	} else {
		exportToCSV(responseArray, outputFileName)
	}

}

// parseJSON converts the HTTP Response into JSON Object
func parseJSON(responseArray []ScannerResult) {

	// Declare empty interface
	var result map[string]interface{}

	for _, response := range responseArray {

		// Decode JSON to interface
		// Unmarshal takes byte array as 1st parameter
		json.Unmarshal(response.HTTPResponseBody, &result)
		fmt.Println("Response JSON = ", result)
	}

}

// exportToCSV exports the HTTP Response into a CSV file
func exportToCSV(responseArray []ScannerResult, filename string) {

	// Create a random filename

	filePtr, err := os.Create(filename)
	defer filePtr.Close()

	if err != nil {
		color.Set(color.FgHiRed)
		log.Fatalf("Error while creating file: %s", err)

		// Dump result on the screen
		showResponseOnTerminal(responseArray)
		color.Unset()
	}

	// Create the csv data array
	responseData := [][]string{
		{"Code", "Length", "Payload", "Time"},
	}

	for _, response := range responseArray {
		row := []string{strconv.Itoa(response.HTTPResponseCode), strconv.Itoa(response.HTTPResponseLength), response.HTTPRequestPayload, response.HTTPResponseTime.String()}
		responseData = append(responseData, row)
	}

	csvwriter := csv.NewWriter(filePtr)
	for _, row := range responseData {
		_ = csvwriter.Write(row)
	}
	csvwriter.Flush()

	color.Set(color.FgHiGreen)
	fmt.Printf("Result has been exported to %s\n", filename)
	color.Unset()
}

// showResponseOnTerminal shows the output on the terminal
func showResponseOnTerminal(responseArray []ScannerResult) {
	color.Set(color.FgHiBlue)
	fmt.Printf("Code \t Length \t Payload \t Time\n")
	fmt.Printf("==============================\n")
	color.Unset()

	for _, response := range responseArray {
		color.Set(color.FgHiGreen)
		fmt.Printf("%d \t %d \t %s \t %v\n", response.HTTPResponseCode, response.HTTPResponseLength, response.HTTPRequestPayload, response.HTTPResponseTime)
		color.Unset()
	}
}
